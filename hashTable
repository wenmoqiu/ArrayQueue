import java.util.Scanner;
public class HashTableDemo{
  public static void main(String[] args){
    //创建哈希表
   HashTab hashTab = new HashTab(7);
   
   //写一个简单的菜单
   String key = "";
   Scanner scanner = new Scanner(System.in);
   while(true){
    System.out.println("add: 添加雇员");
    System.out.println("list: 显示雇员");
    System.out.println("exit: 退出系统");
    System.out.println("search: 搜索雇员");
    
    key = scanner.next();
    
    switch(key){
      
      case "add":
        System.out.println("输入id");
        int id = scanner.nextInt();
        System.out.println("输入名字");
        String name = scanner.next();
        //创建雇员
        Emp emp = new Emp(id, name); 
        hashTab.add(emp);
        break;
      case "list":
        hashTab.list();
        break;
      case "exit":
        scanner.close();
        System.exit(0);
        break;
     case "search":
        System.out.println("输入id");
        int id1 = scanner.nextInt();
        hashTab.findEmpById(id1);
        break;
     default:
       break;
    }
  }
  }
        
  //创建哈希表，管理多条链表
  public static class HashTab {
    private EmpLinkedList[] empLinkedListArray; //数组里面放置了链表
    private int size; //表示共有多少条链表
    
    //构造器
    public HashTab(int size){//多少条链表
      this.size=size;
      empLinkedListArray = new EmpLinkedList[size];
      //分别初始化每一条链表
      for(int i=0; i<size; i++){
        empLinkedListArray[i] = new EmpLinkedList();
      }
    }
    
    public void add(Emp emp){
      //根据员工的id得到该员工应当添加到哪条链表
      int empLinkedListNO=hashFun(emp.id);
      //将emp添加到对应的链表中
      empLinkedListArray[empLinkedListNO].add(emp);
    }
    
    public void list(){
      for(int i=0; i<size; i++){
        empLinkedListArray[i].list(i);
      }
    }
    
    public void findEmpById(int id){
      //确认到哪条列表查找
      int empLinkedListNO = hashFun(id);
      Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);
      if(emp!=null){ //找到了
        System.out.printf("在第"+(empLinkedListNO+1)+"条链表中找到 雇员id=" + id);
        System.out.println();
      }else{
        System.out.println("在哈希表中没有找到该雇员");
      }
    }
    
    //编写一个散列函数，使用一个简单的取模法
    public int hashFun(int id){
      return id%size;}
  }
  
  public static class Emp{
    public int id;
    public String name;
    public Emp next; //指向下一个节点的默认为空
    
    //构造器
    public Emp(int id, String name){
      super();
      this.id=id;
      this.name = name;
    }
  }
  
  //创建一个employee linkedlist表示链表
  public static class EmpLinkedList{ //链表
    //头指针指向第一个雇员，因此这个链表的head是直接指向第一个雇员的
    private Emp head; //默认为空
    
    //添加雇员到链表
    
    //1.假定当添加雇员的时候添加到最后，id是自增的，及id的分配总是从小到大
    //因此我们将该雇员直接加入到本链表的最后即可
    public void add(Emp emp){
      
//      //根据员工的id得到该员工嬴荡添加到哪条链表
//      int empLinkedListNO = hashFun(emp.id);
//      //加入到将emp添加到对应的链表中
//      empLinkedListArray[empLinkedListNO].add(emp);
      //如果添加第一个雇员
      if(head == null){
        head = emp;
        return;
      }
      //如果不是添加第一个雇员则使用一个辅助的指针帮助定位到最后
      Emp curEmp = head;
      while(true){
        if(curEmp.next==null){
          break;
        }
        curEmp=curEmp.next;
    }
      //退出时直接将emp加入链表
      curEmp.next=emp;
    }
    
    //遍历链表的雇员信息
    
    public void list(int no){
      if(head==null){ //说明链表为空
        System.out.println("第"+no+"条链表为空");
        return;
      }
      System.out.print("第"+no+"条的链表信息为");
      Emp curEmp = head;
      while(true){
        System.out.printf("=> id=%d name=%s\t", curEmp.id, curEmp.name);
        if(curEmp.next==null){//说明currentemployee已经是最后节点
          break;
        }
        curEmp=curEmp.next; //遍历
      }
      System.out.println();
    }
    //如果找到返回emp，如果没有找到就返回空
    public Emp findEmpById(int id){
      //判断链表是否为空
      if(head==null){
        System.out.println("链表为空");
        return null;}
      //辅助指针
      Emp curEmp = head;
      while(true){
        if(curEmp.id==id){
          break;}
        //退出
        if(curEmp.next==null){
          curEmp=null;
          break;
        }
        curEmp=curEmp.next;
    }
      return curEmp;
  }
  
  
  }
}
          
    
    
    
    
